// Mocks generated by Mockito 5.4.5 from annotations
// in movietvseries/test/presentation/pages/watchlist/watchlist_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;

import 'package:flutter_bloc/flutter_bloc.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movietvseries/domain/usecases/get_watchlist_movies.dart' as _i2;
import 'package:movietvseries/domain/usecases/get_watchlist_status_movie.dart'
    as _i3;
import 'package:movietvseries/domain/usecases/get_watchlist_status_tv.dart'
    as _i8;
import 'package:movietvseries/domain/usecases/get_watchlist_tv.dart' as _i7;
import 'package:movietvseries/domain/usecases/remove_watchlist_movie.dart'
    as _i5;
import 'package:movietvseries/domain/usecases/remove_watchlist_tv.dart' as _i10;
import 'package:movietvseries/domain/usecases/save_watchlist_movie.dart' as _i4;
import 'package:movietvseries/domain/usecases/save_watchlist_tv.dart' as _i9;
import 'package:movietvseries/presentation/bloc/watchlist/watchlist_movie_bloc.dart'
    as _i6;
import 'package:movietvseries/presentation/bloc/watchlist/watchlist_tv_bloc.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetWatchlistMovies_0 extends _i1.SmartFake
    implements _i2.GetWatchlistMovies {
  _FakeGetWatchlistMovies_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetWatchListStatusMovie_1 extends _i1.SmartFake
    implements _i3.GetWatchListStatusMovie {
  _FakeGetWatchListStatusMovie_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSaveWatchlistMovie_2 extends _i1.SmartFake
    implements _i4.SaveWatchlistMovie {
  _FakeSaveWatchlistMovie_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRemoveWatchlistMovie_3 extends _i1.SmartFake
    implements _i5.RemoveWatchlistMovie {
  _FakeRemoveWatchlistMovie_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWatchListMovieState_4 extends _i1.SmartFake
    implements _i6.WatchListMovieState {
  _FakeWatchListMovieState_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetWatchlistTv_5 extends _i1.SmartFake
    implements _i7.GetWatchlistTv {
  _FakeGetWatchlistTv_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetWatchListStatusTv_6 extends _i1.SmartFake
    implements _i8.GetWatchListStatusTv {
  _FakeGetWatchListStatusTv_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSaveWatchlistTv_7 extends _i1.SmartFake
    implements _i9.SaveWatchlistTv {
  _FakeSaveWatchlistTv_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRemoveWatchlistTv_8 extends _i1.SmartFake
    implements _i10.RemoveWatchlistTv {
  _FakeRemoveWatchlistTv_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWatchListTVState_9 extends _i1.SmartFake
    implements _i11.WatchListTVState {
  _FakeWatchListTVState_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WatchListMovieBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchListMovieBloc extends _i1.Mock
    implements _i6.WatchListMovieBloc {
  MockWatchListMovieBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetWatchlistMovies get getWatchlistMovies =>
      (super.noSuchMethod(
            Invocation.getter(#getWatchlistMovies),
            returnValue: _FakeGetWatchlistMovies_0(
              this,
              Invocation.getter(#getWatchlistMovies),
            ),
          )
          as _i2.GetWatchlistMovies);

  @override
  _i3.GetWatchListStatusMovie get getWatchListStatusMovie =>
      (super.noSuchMethod(
            Invocation.getter(#getWatchListStatusMovie),
            returnValue: _FakeGetWatchListStatusMovie_1(
              this,
              Invocation.getter(#getWatchListStatusMovie),
            ),
          )
          as _i3.GetWatchListStatusMovie);

  @override
  _i4.SaveWatchlistMovie get saveWatchlistMovie =>
      (super.noSuchMethod(
            Invocation.getter(#saveWatchlistMovie),
            returnValue: _FakeSaveWatchlistMovie_2(
              this,
              Invocation.getter(#saveWatchlistMovie),
            ),
          )
          as _i4.SaveWatchlistMovie);

  @override
  _i5.RemoveWatchlistMovie get removeWatchlistMovie =>
      (super.noSuchMethod(
            Invocation.getter(#removeWatchlistMovie),
            returnValue: _FakeRemoveWatchlistMovie_3(
              this,
              Invocation.getter(#removeWatchlistMovie),
            ),
          )
          as _i5.RemoveWatchlistMovie);

  @override
  _i6.WatchListMovieState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeWatchListMovieState_4(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i6.WatchListMovieState);

  @override
  _i12.Stream<_i6.WatchListMovieState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i12.Stream<_i6.WatchListMovieState>.empty(),
          )
          as _i12.Stream<_i6.WatchListMovieState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i6.WatchListMovieEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i6.WatchListMovieEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i6.WatchListMovieState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i6.WatchListMovieEvent>(
    _i13.EventHandler<E, _i6.WatchListMovieState>? handler, {
    _i13.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i13.Transition<_i6.WatchListMovieEvent, _i6.WatchListMovieState>?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i12.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);

  @override
  void onChange(_i13.Change<_i6.WatchListMovieState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [WatchListTVBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchListTVBloc extends _i1.Mock implements _i11.WatchListTVBloc {
  MockWatchListTVBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.GetWatchlistTv get getWatchlistTVs =>
      (super.noSuchMethod(
            Invocation.getter(#getWatchlistTVs),
            returnValue: _FakeGetWatchlistTv_5(
              this,
              Invocation.getter(#getWatchlistTVs),
            ),
          )
          as _i7.GetWatchlistTv);

  @override
  _i8.GetWatchListStatusTv get getWatchListStatusTV =>
      (super.noSuchMethod(
            Invocation.getter(#getWatchListStatusTV),
            returnValue: _FakeGetWatchListStatusTv_6(
              this,
              Invocation.getter(#getWatchListStatusTV),
            ),
          )
          as _i8.GetWatchListStatusTv);

  @override
  _i9.SaveWatchlistTv get saveWatchlistTV =>
      (super.noSuchMethod(
            Invocation.getter(#saveWatchlistTV),
            returnValue: _FakeSaveWatchlistTv_7(
              this,
              Invocation.getter(#saveWatchlistTV),
            ),
          )
          as _i9.SaveWatchlistTv);

  @override
  _i10.RemoveWatchlistTv get removeWatchlistTV =>
      (super.noSuchMethod(
            Invocation.getter(#removeWatchlistTV),
            returnValue: _FakeRemoveWatchlistTv_8(
              this,
              Invocation.getter(#removeWatchlistTV),
            ),
          )
          as _i10.RemoveWatchlistTv);

  @override
  _i11.WatchListTVState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeWatchListTVState_9(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i11.WatchListTVState);

  @override
  _i12.Stream<_i11.WatchListTVState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i12.Stream<_i11.WatchListTVState>.empty(),
          )
          as _i12.Stream<_i11.WatchListTVState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i11.WatchListTVEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i11.WatchListTVEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i11.WatchListTVState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i11.WatchListTVEvent>(
    _i13.EventHandler<E, _i11.WatchListTVState>? handler, {
    _i13.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i13.Transition<_i11.WatchListTVEvent, _i11.WatchListTVState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i12.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);

  @override
  void onChange(_i13.Change<_i11.WatchListTVState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
