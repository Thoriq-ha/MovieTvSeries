// Mocks generated by Mockito 5.4.5 from annotations
// in movietvseries/test/presentation/pages/tv/home_tv_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movietvseries/domain/usecases/get_now_playing_tv.dart' as _i2;
import 'package:movietvseries/domain/usecases/get_popular_tv.dart' as _i4;
import 'package:movietvseries/domain/usecases/get_top_rated_tv.dart' as _i6;
import 'package:movietvseries/presentation/bloc/tv/now_playing_tv_bloc.dart'
    as _i3;
import 'package:movietvseries/presentation/bloc/tv/popular_tv_bloc.dart' as _i5;
import 'package:movietvseries/presentation/bloc/tv/top_rated_tv_bloc.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetNowPlayingTv_0 extends _i1.SmartFake
    implements _i2.GetNowPlayingTv {
  _FakeGetNowPlayingTv_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNowPlayingTVState_1 extends _i1.SmartFake
    implements _i3.NowPlayingTVState {
  _FakeNowPlayingTVState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetPopularTv_2 extends _i1.SmartFake implements _i4.GetPopularTv {
  _FakeGetPopularTv_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePopularTVState_3 extends _i1.SmartFake
    implements _i5.PopularTVState {
  _FakePopularTVState_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetTopRatedTv_4 extends _i1.SmartFake implements _i6.GetTopRatedTv {
  _FakeGetTopRatedTv_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTopRatedTVState_5 extends _i1.SmartFake
    implements _i7.TopRatedTVState {
  _FakeTopRatedTVState_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NowPlayingTVBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNowPlayingTVBloc extends _i1.Mock implements _i3.NowPlayingTVBloc {
  MockNowPlayingTVBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetNowPlayingTv get getNowPlayingTVs =>
      (super.noSuchMethod(
            Invocation.getter(#getNowPlayingTVs),
            returnValue: _FakeGetNowPlayingTv_0(
              this,
              Invocation.getter(#getNowPlayingTVs),
            ),
          )
          as _i2.GetNowPlayingTv);

  @override
  _i3.NowPlayingTVState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeNowPlayingTVState_1(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i3.NowPlayingTVState);

  @override
  _i8.Stream<_i3.NowPlayingTVState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<_i3.NowPlayingTVState>.empty(),
          )
          as _i8.Stream<_i3.NowPlayingTVState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i3.NowPlayingTVEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i3.NowPlayingTVEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i3.NowPlayingTVState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i3.NowPlayingTVEvent>(
    _i9.EventHandler<E, _i3.NowPlayingTVState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i9.Transition<_i3.NowPlayingTVEvent, _i3.NowPlayingTVState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void onChange(_i9.Change<_i3.NowPlayingTVState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PopularTVBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularTVBloc extends _i1.Mock implements _i5.PopularTVBloc {
  MockPopularTVBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetPopularTv get getPopularTVs =>
      (super.noSuchMethod(
            Invocation.getter(#getPopularTVs),
            returnValue: _FakeGetPopularTv_2(
              this,
              Invocation.getter(#getPopularTVs),
            ),
          )
          as _i4.GetPopularTv);

  @override
  _i5.PopularTVState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakePopularTVState_3(this, Invocation.getter(#state)),
          )
          as _i5.PopularTVState);

  @override
  _i8.Stream<_i5.PopularTVState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<_i5.PopularTVState>.empty(),
          )
          as _i8.Stream<_i5.PopularTVState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i5.PopularTVEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i5.PopularTVEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i5.PopularTVState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i5.PopularTVEvent>(
    _i9.EventHandler<E, _i5.PopularTVState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i9.Transition<_i5.PopularTVEvent, _i5.PopularTVState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void onChange(_i9.Change<_i5.PopularTVState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TopRatedTVBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTopRatedTVBloc extends _i1.Mock implements _i7.TopRatedTVBloc {
  MockTopRatedTVBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetTopRatedTv get getTopRatedTVs =>
      (super.noSuchMethod(
            Invocation.getter(#getTopRatedTVs),
            returnValue: _FakeGetTopRatedTv_4(
              this,
              Invocation.getter(#getTopRatedTVs),
            ),
          )
          as _i6.GetTopRatedTv);

  @override
  _i7.TopRatedTVState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTopRatedTVState_5(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i7.TopRatedTVState);

  @override
  _i8.Stream<_i7.TopRatedTVState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<_i7.TopRatedTVState>.empty(),
          )
          as _i8.Stream<_i7.TopRatedTVState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i7.TopRatedTVEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i7.TopRatedTVEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i7.TopRatedTVState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i7.TopRatedTVEvent>(
    _i9.EventHandler<E, _i7.TopRatedTVState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i9.Transition<_i7.TopRatedTVEvent, _i7.TopRatedTVState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void onChange(_i9.Change<_i7.TopRatedTVState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
