// Mocks generated by Mockito 5.4.5 from annotations
// in movietvseries/test/presentation/pages/tv/tv_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movietvseries/domain/usecases/get_tv_detail.dart' as _i2;
import 'package:movietvseries/domain/usecases/get_tv_recommendations.dart'
    as _i4;
import 'package:movietvseries/presentation/bloc/tv/detail_tv_bloc.dart' as _i3;
import 'package:movietvseries/presentation/bloc/tv/recomendations_tv_bloc.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetTvDetail_0 extends _i1.SmartFake implements _i2.GetTvDetail {
  _FakeGetTvDetail_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDetailTVState_1 extends _i1.SmartFake implements _i3.DetailTVState {
  _FakeDetailTVState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetTvRecommendations_2 extends _i1.SmartFake
    implements _i4.GetTvRecommendations {
  _FakeGetTvRecommendations_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTVRecomendationsState_3 extends _i1.SmartFake
    implements _i5.TVRecomendationsState {
  _FakeTVRecomendationsState_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DetailTVBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailTVBloc extends _i1.Mock implements _i3.DetailTVBloc {
  MockDetailTVBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetTvDetail get getDetailTV =>
      (super.noSuchMethod(
            Invocation.getter(#getDetailTV),
            returnValue: _FakeGetTvDetail_0(
              this,
              Invocation.getter(#getDetailTV),
            ),
          )
          as _i2.GetTvDetail);

  @override
  _i3.DetailTVState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeDetailTVState_1(this, Invocation.getter(#state)),
          )
          as _i3.DetailTVState);

  @override
  _i6.Stream<_i3.DetailTVState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i3.DetailTVState>.empty(),
          )
          as _i6.Stream<_i3.DetailTVState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i3.DetailTVEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i3.DetailTVEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i3.DetailTVState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i3.DetailTVEvent>(
    _i7.EventHandler<E, _i3.DetailTVState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i7.Transition<_i3.DetailTVEvent, _i3.DetailTVState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void onChange(_i7.Change<_i3.DetailTVState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TVRecomendationsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTVRecomendationsBloc extends _i1.Mock
    implements _i5.TVRecomendationsBloc {
  MockTVRecomendationsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetTvRecommendations get getTVRecommendations =>
      (super.noSuchMethod(
            Invocation.getter(#getTVRecommendations),
            returnValue: _FakeGetTvRecommendations_2(
              this,
              Invocation.getter(#getTVRecommendations),
            ),
          )
          as _i4.GetTvRecommendations);

  @override
  _i5.TVRecomendationsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTVRecomendationsState_3(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i5.TVRecomendationsState);

  @override
  _i6.Stream<_i5.TVRecomendationsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i5.TVRecomendationsState>.empty(),
          )
          as _i6.Stream<_i5.TVRecomendationsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i5.TVRecomendationsEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i5.TVRecomendationsEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i5.TVRecomendationsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i5.TVRecomendationsEvent>(
    _i7.EventHandler<E, _i5.TVRecomendationsState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i7.Transition<_i5.TVRecomendationsEvent, _i5.TVRecomendationsState>?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void onChange(_i7.Change<_i5.TVRecomendationsState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
