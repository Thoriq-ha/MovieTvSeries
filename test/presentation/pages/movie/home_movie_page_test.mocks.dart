// Mocks generated by Mockito 5.4.5 from annotations
// in movietvseries/test/presentation/pages/movie/home_movie_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movietvseries/domain/usecases/get_now_playing_movies.dart'
    as _i2;
import 'package:movietvseries/domain/usecases/get_popular_movies.dart' as _i4;
import 'package:movietvseries/domain/usecases/get_top_rated_movies.dart' as _i6;
import 'package:movietvseries/presentation/bloc/movie/now_playing_movie_bloc.dart'
    as _i3;
import 'package:movietvseries/presentation/bloc/movie/popular_movie_bloc.dart'
    as _i5;
import 'package:movietvseries/presentation/bloc/movie/top_rated_movie_bloc.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetNowPlayingMovies_0 extends _i1.SmartFake
    implements _i2.GetNowPlayingMovies {
  _FakeGetNowPlayingMovies_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNowPlayingMovieState_1 extends _i1.SmartFake
    implements _i3.NowPlayingMovieState {
  _FakeNowPlayingMovieState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetPopularMovies_2 extends _i1.SmartFake
    implements _i4.GetPopularMovies {
  _FakeGetPopularMovies_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePopularMoviesState_3 extends _i1.SmartFake
    implements _i5.PopularMoviesState {
  _FakePopularMoviesState_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetTopRatedMovies_4 extends _i1.SmartFake
    implements _i6.GetTopRatedMovies {
  _FakeGetTopRatedMovies_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTopRatedMoviesState_5 extends _i1.SmartFake
    implements _i7.TopRatedMoviesState {
  _FakeTopRatedMoviesState_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NowPlayingMovieBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNowPlayingMovieBloc extends _i1.Mock
    implements _i3.NowPlayingMovieBloc {
  MockNowPlayingMovieBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetNowPlayingMovies get getNowPlayingMovies =>
      (super.noSuchMethod(
            Invocation.getter(#getNowPlayingMovies),
            returnValue: _FakeGetNowPlayingMovies_0(
              this,
              Invocation.getter(#getNowPlayingMovies),
            ),
          )
          as _i2.GetNowPlayingMovies);

  @override
  _i3.NowPlayingMovieState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeNowPlayingMovieState_1(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i3.NowPlayingMovieState);

  @override
  _i8.Stream<_i3.NowPlayingMovieState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<_i3.NowPlayingMovieState>.empty(),
          )
          as _i8.Stream<_i3.NowPlayingMovieState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i3.NowPlayingMovieEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i3.NowPlayingMovieEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i3.NowPlayingMovieState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i3.NowPlayingMovieEvent>(
    _i9.EventHandler<E, _i3.NowPlayingMovieState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i9.Transition<_i3.NowPlayingMovieEvent, _i3.NowPlayingMovieState>?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void onChange(_i9.Change<_i3.NowPlayingMovieState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PopularMoviesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularMoviesBloc extends _i1.Mock implements _i5.PopularMoviesBloc {
  MockPopularMoviesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetPopularMovies get getPopularMovies =>
      (super.noSuchMethod(
            Invocation.getter(#getPopularMovies),
            returnValue: _FakeGetPopularMovies_2(
              this,
              Invocation.getter(#getPopularMovies),
            ),
          )
          as _i4.GetPopularMovies);

  @override
  _i5.PopularMoviesState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakePopularMoviesState_3(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i5.PopularMoviesState);

  @override
  _i8.Stream<_i5.PopularMoviesState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<_i5.PopularMoviesState>.empty(),
          )
          as _i8.Stream<_i5.PopularMoviesState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i5.PopularMoviesEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i5.PopularMoviesEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i5.PopularMoviesState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i5.PopularMoviesEvent>(
    _i9.EventHandler<E, _i5.PopularMoviesState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i9.Transition<_i5.PopularMoviesEvent, _i5.PopularMoviesState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void onChange(_i9.Change<_i5.PopularMoviesState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TopRatedMoviesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTopRatedMoviesBloc extends _i1.Mock
    implements _i7.TopRatedMoviesBloc {
  MockTopRatedMoviesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetTopRatedMovies get getTopRatedMovies =>
      (super.noSuchMethod(
            Invocation.getter(#getTopRatedMovies),
            returnValue: _FakeGetTopRatedMovies_4(
              this,
              Invocation.getter(#getTopRatedMovies),
            ),
          )
          as _i6.GetTopRatedMovies);

  @override
  _i7.TopRatedMoviesState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTopRatedMoviesState_5(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i7.TopRatedMoviesState);

  @override
  _i8.Stream<_i7.TopRatedMoviesState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<_i7.TopRatedMoviesState>.empty(),
          )
          as _i8.Stream<_i7.TopRatedMoviesState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i7.TopRatedMoviesEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i7.TopRatedMoviesEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i7.TopRatedMoviesState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i7.TopRatedMoviesEvent>(
    _i9.EventHandler<E, _i7.TopRatedMoviesState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i9.Transition<_i7.TopRatedMoviesEvent, _i7.TopRatedMoviesState>?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void onChange(_i9.Change<_i7.TopRatedMoviesState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
